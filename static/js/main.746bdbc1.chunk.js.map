{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","props","todos","selectedTodo","onSelectedTodoIdChange","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","query","filterStatus","onInputChange","onSelectChange","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","loading","setLoading","user","setUser","useEffect","loadUser","a","userId","loadedUser","href","email","name","App","setTodos","isLoading","setIsLoading","selectedTodoId","setSelectedTodoId","setQuery","setFilterStatus","debouncedQuery","setDebouncedQuery","loadTodos","loadedTodos","debouncedCallback","useCallback","func","timerId","clearTimeout","args","debounce","handleInputChange","visibleTodos","useMemo","filter","toLowerCase","normalizeQuery","trim","isTitleIncludesQuery","includes","find","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.746bdbc1.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo?: Todo;\n  onSelectedTodoIdChange: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport const TodoList: React.FC<Props> = memo((props) => {\n  const {\n    todos,\n    selectedTodo,\n    onSelectedTodoIdChange,\n  } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr data-cy=\"todo\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn(\n                  { 'has-text-danger': !todo.completed },\n                  { 'has-text-success': todo.completed },\n                )}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => (\n                  selectedTodo?.id === todo.id\n                    ? onSelectedTodoIdChange(null)\n                    : onSelectedTodoIdChange(todo.id)\n                )}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn(\n                      'far',\n                      { 'fa-eye-slash': selectedTodo?.id === todo.id },\n                      { 'fa-eye': selectedTodo?.id !== todo.id },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React, { memo } from 'react';\n\ntype Props = {\n  query: string;\n  filterStatus: string;\n  onInputChange: (value: string) => void;\n  onSelectChange: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const TodoFilter: React.FC<Props> = memo((props) => {\n  const {\n    query,\n    filterStatus,\n    onInputChange,\n    onSelectChange,\n  } = props;\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterStatus}\n            onChange={(event) => onSelectChange(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onInputChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onInputChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect, memo } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo;\n  onSelectedTodoIdChange: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport const TodoModal: React.FC<Props> = memo((props) => {\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  const { selectedTodo, onSelectedTodoIdChange } = props;\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const loadedUser = await getUser(selectedTodo.userId);\n\n        setUser(loadedUser);\n      } catch (error) {\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                onSelectedTodoIdChange(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [debouncedQuery, setDebouncedQuery] = useState('');\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      try {\n        const loadedTodos = await getTodos();\n\n        setTodos(loadedTodos);\n      } catch (error) {\n        setTodos([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  const debounce = (\n    func: React.Dispatch<React.SetStateAction<string>>,\n    delay: number,\n  ) => {\n    let timerId = 0;\n\n    return (...args: unknown[]) => {\n      if (timerId) {\n        clearTimeout(timerId);\n      }\n\n      timerId = setTimeout(func, delay, ...args);\n    };\n  };\n\n  const debouncedCallback = useCallback(\n    debounce(setDebouncedQuery, 400),\n    [],\n  );\n\n  const handleInputChange = useCallback((value: string) => {\n    setQuery(value);\n    debouncedCallback(value);\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const title = todo.title.toLowerCase();\n      const normalizeQuery = debouncedQuery.toLowerCase().trim();\n      const isTitleIncludesQuery = title.includes(normalizeQuery);\n\n      switch (filterStatus) {\n        case 'completed':\n          return todo.completed && isTitleIncludesQuery;\n\n        case 'active':\n          return !todo.completed && isTitleIncludesQuery;\n\n        default:\n          return isTitleIncludesQuery;\n      }\n    });\n  }, [todos, filterStatus, debouncedQuery]);\n\n  const selectedTodo = useMemo(() => (\n    todos.find(todo => todo.id === selectedTodoId)\n  ), [todos, selectedTodoId]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                filterStatus={filterStatus}\n                onInputChange={handleInputChange}\n                onSelectChange={setFilterStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {visibleTodos.length > 0 && (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  onSelectedTodoIdChange={setSelectedTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onSelectedTodoIdChange={setSelectedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}